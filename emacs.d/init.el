;;;; INIT
;;; Packages
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;;; Import directories
(let ((default-directory "~/.emacs.d/site-lisp/"))
  (normal-top-level-add-to-load-path'("." ; User-specific files
				      "themes" ; Themes
				      )))
(let ((default-directory "/usr/share/emacs/site-lisp/"))
  (normal-top-level-add-subdirs-to-load-path)) ; System-wide files
(add-to-list 'load-path "~/dev/repos/mosaic-el/")

;;; Reduced clutter
(load "~/.emacs.d/local/keys.elc")
(load "~/.emacs.d/local/variables.elc")
(load "~/.emacs.d/local/functions.elc")
(load "~/.emacs.d/local/private.elc") ; contains mail stuff

;;; Prevent autogenerated clutter
(setq custom-file "~/.emacs.d/local/custom.el")
(load custom-file)

;;; Lazy loading
(autoload 'vterm "vterm" "libvterm-based terminal" t)
(autoload 'mu4e "mu4e" "Mail client" t)
(autoload 'mosaic-begin "mosaic" "EmacsMosaic frontend for SchemeMosaic" t)


;;; Chrome and bells, jingles & gongs and all that jive
;;; Themes
(require 'powerline)
(require 'moe-theme)
(setq moe-theme-highlight-buffer-id t
      powerline-default-separator (quote arrow-fade))
(moe-theme-random-color)
(moe-dark)
(powerline-moe-theme)
(add-hook 'after-make-frame-hook #'powerline-moe-theme)

;;; Font
(add-to-list 'default-frame-alist '(font . "Iosevka Extended Light-10"))
;; No font handling for Remacs
(unless (string-prefix-p "Remacs" (version))
  (set-fontset-font t 'unicode "Unifont" nil 'prepend)
  (set-fontset-font t 'unicode "Symbola" nil 'append))
;;; Transparency
(set-frame-parameter (selected-frame) 'alpha '(95 . 93))
(add-to-list 'default-frame-alist   '(alpha . (95 . 93)))


;;;; MODES
;;; Bars
;; Remacs doesn't support graphical bars.
(unless (string-prefix-p "Remacs" (version))
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1))
;;; Global major modes
(column-number-mode)
(size-indication-mode)
(which-function-mode)
(delete-selection-mode)
;;; Custom
(annoying-arrows-mode)
(dired-async-mode)
;; (display-battery-mode)
(global-anzu-mode)
(global-undo-tree-mode)

;;; Encoding and text
(prefer-coding-system       'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(set-keyboard-coding-system 'utf-8-unix)
(set-terminal-coding-system 'utf-8-unix)


;;;; HOOKS
;;; My own hooks (defined in functions.el)
(defun add-my-hooks (hooks)
  (dolist (hook hooks)
    (add-hook (intern (concat (symbol-name hook) "-mode-hook"))
	      (intern (concat "my/" (symbol-name hook) "-mode-hook")))))

(add-my-hooks '(mail prog text))
(add-my-hooks '(makefile nxml sgml))
(add-my-hooks '(clojure java python racket rust tuareg))

;;; Lisp hooks
(dolist (hook '(lisp-mode-hook
                clojure-mode-hook emacs-lisp-mode-hook
                hy-mode-hook scheme-mode-hook racket-mode-hook))
  (add-hook hook #'my/lisp-mode-hook))

(add-hook 'racer-mode-hook #'my/racer-mode-hook)
(add-hook 'compilation-mode-hook #'page-break-lines-mode)

(eldoc-add-command 'paredit-backward-delete 'paredit-close-round)

;;; Major modes for mysterious files
(add-to-list 'auto-mode-alist '("\\.rc$" . conf-mode))
(add-to-list 'auto-mode-alist '("\\.conf$'" . conf-mode))
(add-to-list 'auto-mode-alist '("PKGBUILD" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.install$" . conf-mode))
(add-to-list 'auto-mode-alist '("\\.cell$" . cell-mode))
(add-to-list 'auto-coding-alist '("\\.\\(nfo\\|NFO\\)\\'" . cp437-dos))
